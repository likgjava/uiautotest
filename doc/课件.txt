

移动自动化测试
1.1移动自动化测试简介
随着互联网技术的飞速发展，软件行业也变得越来越发达。使用软件的用户和软件的使用频率也在不断增多，所以对软件质量的要求也随之提高。因为成本、质量的变化现在对自动化测试的重视度越来越高，在几年前自动化测试还没有像现在这么普及，但是现在随便去一家公司面试都会问到自动化测试，当然这个和他们公司是否运用到另说。但是不言而喻的是大家都意识到了软件测试这个行业都走向了自动化这条路。或许你认为实施自动化可能不是必须的，可能在你的观念中测试思想是最重要的，所谓的自动化工具或者框架都是用来辅助的，但是作者想告诉你的是：计算机行业的发展、软件测试行业的发展其实就像工业革命一样，为的是通过此途径解决人类手工劳动的复杂性，当然可能并不一定是这几年出现，但是如果我们不学习肯定会被时代淘汰。对于现在的我们来说自动化测试是我们必须掌握的技能，同时它也是这个行业的一种发展趋势，当然你想要提高到更高的一个档次可以往测试开发走，我坚信你能够走得更远。


1.2移动自动化测试工具有哪些？
1、MonkeyRunner是Android SDK提供的测试工具。该工具提供了一些API，可以通过该API来控制Android设备或者模拟器。
2、UiAutomator也是Android提供的自动化测试框架，基本上支持所有的Android事件操作，对比Instrumentation它不需要测试人员了解代码实现细节。基于Java，测试代码结构简单、编写容易、学习成本，一次编译，所有设备或模拟器都能运行测试，能跨App。Uiautomator是Android 4.1后加入的，所以仅支持Android 4.1 和以上的版本，但是不支持webview。
3、Robotium也是基于Instrumentation的测试框架，只支持Java语言开发并只支持Android，并不支持跨进程。
4、Espresso是Google的开源自动化测试框架。相对于Robotium和UIAutomator，它的特点是规模更小、更简洁，API更加精确，编写测试代码简单，容易快速上手。因为是基于Instrumentation的，所以不能跨App。
5、Appium是最近比较热门的框架，社区也很活跃，功能很强大。

1.3Appium介绍
特点：
开源；
支持Native App、Hybird App、Web App；
支持Android、iOS、Firefox OS；
Server也是跨平台的，你可以使用Mac OS X、Windows或者Linux；
用Appium自动化测试不需要重新编译App；
支持很多语言来编写测试脚本，Java、Javascript、PHP、Python、C#、Ruby等主流语言；

它的设计理念：
Client/Server架构，运行的时候Server端会监听Client端发过来的命令，翻译这些命令发送给移动设备或模拟器，然后移动设备或模拟器做出响应的反应。正是因为这种架构，所以Client可以使用Appium client libraries多种语言的测试脚本，而且Server端完全可以部署在服务器上，甚至云服务器。
Session，每个Client连接到Server以后都会有一个Session ID，而且Client发送命令到Server端都需要这个Session ID，因为这个seesion id代表了你所打开的浏览器或者是移动设备的模拟器。所以你甚至可以打开N个Session，同时测试不同的设备或模拟器。
Desired Capabilities，其实就是一个键值对，设置一些测试的相关信息来告诉Server端，我们需要测试iOS、还是Android，或者换是WebApp等信息。
Appium Server是Node.js写的，所以可以直接用NPM来进行安装。
Appium Clients，Mac OS和Win下提供GUI，不需要装Node.js，方便测试人员操作。

相关限制：如果你在Windows使用Appium，你没法使用预编译专用于OS X的.app文件，因为Appium依赖OS X专用的库来支持iOS测试，所以在Windows平台你不能测试iOS Apps。这意味着你只能通过在Mac上来运行iOS测试。

总结：在iOS部分是封装了UIAutomation；Android 4.2以上是用UiAutomator，Android 2.3 ~ 4.1用的是 Instrumentation，也就说Appium同时封装了UiAutomator和Instrumentation。所以Appium拥有了以上几大框架的所有优点：跨App，支持Native App、Hybird App、Web App，还支持N种语言来编写你的测试脚本。

1.4论本课程的重要性
面试中的加分项、吹牛逼的资本...




appium环境搭建

1、安装JDK
版本：1.7
下载地址：http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html
配置环境变量：
JAVA_HOME=C:\Program Files\Java\jdk1.7.0_80
在Path中添加:%JAVA_HOME%\bin;

2、安装IDEA
官网：https://www.jetbrains.com/


3、安装Android SDK
下载地址：http://dl.google.com/android/android-sdk_r24.4.1-windows.zip
配置环境变量：
ANDROID_HOME=D:\software\Android\Sdk
在Path中添加:%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools;

4、安装Genymotion
1）打开Genymotion官网：https://www.genymotion.com/ 
2）注册
3）下载地址：https://www.genymotion.com/download/
注意事项：
1、最好不要改变VirtualBox的安装路径
1、enabled in BIOS settings



http://download.virtualbox.org/virtualbox/5.1.30/VirtualBox-5.1.30-118389-Win.exe



异常：Failure [INSTALL_FAILED_NO_MATCHING_ABIS]
原因：Genymotion出现这个情况需要安装补丁包。原因是某些应用使用了原生库（NDK，Native Lib）因为这些库的编译目标通常是arm的cpu，在x86上运行就会报这样的错误。
具体解决办法如下：
下载Genymotion-ARM-Translation_v1.1.zip，直接拖入genymotion模拟器窗口，直到提示成功。


异常：Genymotion unfortunately has stopped
genymotion 6.0的 arm 兼容包，拖进去，处理完成后点OK，再关闭模拟器重启一下就可以了。







5、安装nodejs
下载地址：https://nodejs.org/en/download/


6、安装appium
appium有两种安装模式:
通过客户端安装
通过终端安装

区别：
做自动化肯定不可能只是在一台机器上做自动化，因为那样的意义并不是很大，所以很多时候我们都是链接多台电脑去执行，但是appium去链接多台电脑时就需要启动多个appium的服务，如果说你安装是通过客户端去安装的，你链接多台机器就需要启动多次，配置多次，这样对你电脑本身也是一个性能考验。如果你是通过终端命令安装的在启动的时候你只需要通过命令启动多个服务就好。

appium客户端安装：
官方下载：http://appium.io/


appium终端安装：
1）直接在终端输入命令：npm install -g appium 一般不会成功，有防火墙
2）通过国内镜像安装：npm -registry http://registry.cnpmjs.org install -g appium
3）通过cnpm安装：
npm install -g cnpm --registry=https://registry.npm.taobao.org
cnpm install -g appium

npm与cnpm
npm（node package manager）是nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）
1.安装插件：npm install <name> [-g] [--save-dev]
<name>：node插件名称。 
例：npm install appium --save-dev
-g：全局安装。 
将会安装在C:\Users\Administrator\AppData\Roaming\npm，并且写入系统环境变量；非全局安装：将会安装在当前定位目录；全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过require()调用；
--save：将保存配置信息至package.json（package.json是nodejs项目配置文件）；
-dev：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；
2.卸载插件：npm uninstall <name> [-g] [--save-dev] 
PS：不要直接删除本地插件包 
3.更新插件：npm update <name> [-g] [--save-dev] 
4.更新全部插件：npm update [--save-dev] 
5.查看npm帮助：npm help 
6.查看当前目录已安装插件：npm list


说明：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，所以我们乐于分享的淘宝团队干了这事。
官方网址：http://npm.taobao.org
安装：npm install cnpm -g --registry=https://registry.npm.taobao.org
注意：
1.安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误
2.cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm。 



7、appium的hello world
示例效果：通过程序自动安装“知乎”APP到手机中，启动APP并模拟左右滑动来切换页面。


8、appium日志分析

============================================================================================================================
Android知识讲解
1、ADB工具
简介
ADB的全称为Android Debug Bridge，字面意思就是安卓调试桥接，简单点说就是一个调试工具。它是Android系统提供的一套工具，通过它我们可以在电脑上建立一个连接到手机的通道，然后可以在电脑上向手机发送一些指令，完成一些我们需要做的工作。

ADB常用命令
命令	描述
adb devices	查看已连接的设备
adb install <xxx.apk>	将apk文件安装到设备上
adb -s <serialno> install <xxx.apk>	将apk文件安装到指定设备上
adb uninstall <packageName>	卸载app
adb uninstall -k <packageName>	卸载app，保留数据和缓存
adb -s <serialno> uninstall <packageName>	卸载指定手机上的app
adb push <本地文件> <手机目标文件>	将本地文件上传到手机
adb pull <手机文件> <本地目标文件>	将手机文件下载到本地
adb shell	进入手机控制台
adb shell pm list packages	执行一条Linux命令


2、UIAutomatorViewer工具
UIAutomatorViewer是一个定位工具，在Android SDK目录下的tools/bin目录下。
我们打开定位工具、模拟器后直接点击定位工具左上角红色圈出的按钮（获取当前屏幕）UIAutomatorViewer会自动获取到当前模拟器所打开的页面。
最左边的区域就是捕获的模拟器页面，在该页面鼠标移到你要查找的元素上面，在整个区域右面上面就是当前对象的一个布局结构，能够清晰的看见他是采用的是什么布局。右下角的区域就是我们需要定位的对象的属性值


3、Package及Activity讲解
Package可以理解为APP的命名空间，是APP的唯一标示。我们在做APP自动化时，就需要知道他的Package，通过Package就可以定位到是哪个APP了。

Activity是Android组件中最基本也是最为常见用的四大组件之一。和用户进行交互的，每当用户打开app进行操作的时候会发现在不断的跳页面，其实每个页面就是一个activity。我们做自动化时拿到了这个app的Package，但是我们还不能启动起来，因为我们没有告诉需要去操作哪一个Activity，因此在这个时候我们需要讲app启动时的Activity写入到启动参数中，如果你传入一个其他页面的是不行的。

如何获取package及activity
获取package和activity的方法，在网上说了有很多种，这里我只给大家说我们常用的。
1、询问开发人员
2、

3、通过android sdk工具来，在sdk里面有一个工具，叫做aapt，我们可以直接通过这个工具来，在命令行输入：
aapt dump badging xxxx.apk,后面这个xxx.apk文件是我们aok所在的绝对路径，敲入之后那么可以显示出来相关信息，可以在里面仔细找了，packageName、lanuchActivity这两个关键字。



============================================================================================================================

学习DesiredCapabilities
简介
DesiredCapabilities 携带了一些配置信息，在启动session的时候是必须提供，如启动模式、apk/app配置、package/activity配置、浏览器配置、键盘配置等。
DesiredCapabilities的重要作用是在启动时传递信息给Appium Server。

常用Capability配置

下表中列举了Appium常用的Capability配置


============================================================================================================================

元素定位

name：name可以用text或content-desc只要这两个属性，任意一个有内容都可以用他定位。不要用name定位输入框，比如输入框中有默认值，每次输入内容后值都会改变，这时再次定位就会定位不到了。
driver.findElement(By.name("每日推荐"));
driver.findElementByName("每日推荐");

className：这个定位在web时可以，手机中同名的className太多了。
driver.findElement(By.className("android.widget.TextView"));
driver.findElementByClassName("android.widget.TextView");

id：redouce-id中的内容
driver.findElement(By.id("com.miui.home:id/search_but"));
driver.findElementById("com.miui.home:id/search_but");

AccessibilityId
driver.findElementByAccessibilityId("今日头条");

UiAutomator
driver.findElementByAndroidUIAutomator("new UiSelector().text(\"每日推荐\")");

xpath
driver.findElement(By.xpath("android.widget.FrameLayout[contains(@name, '每日推荐')]"));
driver.findElementByXpath("android.widget.FrameLayout[contains(@name, '每日推荐')]");


============================================================================================================================

元素点击
1).单击
单击方式有四个。下面分别写个示例，如何定位就不写了，常见的点击是click()方法，不过手机最好用TouchAction来点击。
element.click();
element.tap(1, 300);
driver.tap(1, element, 300);
new TouchAction(driver).tap(element).release().perform();


2).多击
element.tap(2, 30);
driver.tap(2, element, 30);
new TouchAction(driver).press(element).waitAction(30).release().press(element).waitAction(30).release().perform();


3).长按
new TouchAction(driver).longPress(element).release().perform();
new TouchAction(driver).longPress(element, 100).release().perform();

--------------------------------------------------------------
输入框操作
element.sendKeys("1234中国");
driver.pressKeyCode(AndroidKeyCode.KEYCODE_A); // 字母“a”
driver.pressKeyCode(AndroidKeyCode.DEL);


--------------------------------------------------------------

滑动
1.页面滑动
手机坐标原理图：

滑动时开始位置和结束位置要在屏幕内，不能超出屏幕，但手机分不同分辨率，我们的代码就得兼容不同分辨率的手机，因此我们首先要获得手机分辨率，才能确定我们手指的位置。手指的位置不要离屏幕边缘太近。
获取屏幕分辨率
Dimension dimension = driver.manage().window().getSize();

获取X轴最大值和Y轴最大值。
int x = dimension.getWidth();
int y = dimension.getHeight();

滑动屏幕在appium中使用到的方法是：
driver.swipe(int startx, int starty, int endx, int endy, int duration);

这时我们需要考虑滑屏的开始位置和结束位置，


通过上图，我们可以知道，左右滑动时Y轴不变，上下滑动时，X轴不变。那么我们就可以将不变值定为屏幕中间的位置，即x / 2或 y / 2.
滑动的区间可以设置为从9/10的位置滑到1/10的位置。通过计算最终可适用全部手机。duration表示滑动时间，毫秒，数值越小滑动越快。
从上往下滑动
driver.swipe(x/2, y/10, x/2, y*9/10, 500);
从下往上滑动
driver.swipe(x/2, y*9/10, x/2, y/10, 500);
从左往右滑
driver.swipe(x/10, y/2, x*9/10, y/2, 500);
从右往左滑
driver.swipe(x*9/10, y/2, x/10, y/2, 500);


2.元素滑动
元素滑动其实就是精确位置的页面滑动。首先要获取到元素的开始位置的坐标，再获取到元素的高度和宽度，然后计算出滑动的开始和结束坐标。
//获取元素信息
AndroidElement element = driver.findElement(By.xpath("//android.widget.FrameLayout[@index=2]"));
int x = element.getLocation().getX();
int y = element.getLocation().getY();
int width = element.getSize().getWidth();
int height = element.getSize().getHeight();

//计算起止位置坐标
int startX = x + width * 9 / 10;
int startY = y + height / 2;
int endX = x + width / 10;
int endY = startY;

//从右往左滑
driver.swipe(startX, startY, endX, endY, 500);
Thread.sleep(10000);

3.解锁九宫格
思路：
在做功能测试时，是将手指按住屏幕，然后从一个点滑动到另一个点，将密码滑动完成后再抬起手。这个方法封装在TouchAction中，TouchAction方法所有操作都需要加perform才会执行。

//定位9个圆点
AndroidElement one = driver.findElement(By.name("one"));
AndroidElement two = driver.findElement(By.name("two"));
AndroidElement three = driver.findElement(By.name("three"));
AndroidElement four = driver.findElement(By.name("four"));
AndroidElement five = driver.findElement(By.name("five"));
AndroidElement six = driver.findElement(By.name("six"));
AndroidElement seven = driver.findElement(By.name("seven"));
AndroidElement eight = driver.findElement(By.name("eight"));
AndroidElement nine = driver.findElement(By.name("nine"));
//1->2->5->8->9
TouchAction touchAction = new TouchAction(driver);
touchAction.press(one).moveTo(two).moveTo(five).moveTo(eight).moveTo(nine).release().perform();

--------------------------------------------------------------



下拉框操作

--------------------------------------------------------------
屏幕放大缩小









http://blog.csdn.net/wukuy123/article/details/73744784



问题记录：
Android 怎么获取 INJECT_EVENTS（小米手机）
http://blog.csdn.net/zhaoqi5705/article/details/53455597


cnpm与npm的区别
http://blog.csdn.net/chi1130/article/details/72773278




资源
http://www.cnblogs.com/fnng/p/4540731.html
https://anikikun.gitbooks.io/appium-girls-tutorial/content/download_fulu.html 









