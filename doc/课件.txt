

移动自动化测试
1.1移动自动化测试简介
随着互联网技术的飞速发展，软件行业也变得越来越发达。使用软件的用户和软件的使用频率也在不断增多，所以对软件质量的要求也随之提高。考虑到成本、效率等因素，企业目前对自动化测试的重视度越来越高。软件测试这个行业都走向了自动化这条路，对于现在的我们来说自动化测试是我们必须掌握的技能，同时它也是这个行业的一种发展趋势。自动化测试是一个接近测试开发的工作。


1.2移动自动化测试工具有哪些？
1、MonkeyRunner是Android SDK提供的测试工具。该工具提供了一些API，可以通过该API来控制Android设备或者模拟器。
2、UiAutomator也是Android提供的自动化测试框架，基本上支持所有的Android事件操作，对比Instrumentation它不需要测试人员了解代码实现细节。基于Java，测试代码结构简单、编写容易、学习成本，一次编译，所有设备或模拟器都能运行测试，能跨App。Uiautomator是Android 4.1后加入的，所以仅支持Android 4.1 和以上的版本，但是不支持webview。
3、Robotium也是基于Instrumentation的测试框架，只支持Java语言开发并只支持Android，并不支持跨进程。
4、Espresso是Google的开源自动化测试框架。相对于Robotium和UIAutomator，它的特点是规模更小、更简洁，API更加精确，编写测试代码简单，容易快速上手。因为是基于Instrumentation的，所以不能跨App。
5、Appium是最近比较热门的框架，社区也很活跃，功能很强大。

1.3Appium介绍
特点：
开源；
支持Native App、Hybird App、Web App；
支持Android、iOS、Firefox OS；
Server也是跨平台的，你可以使用Mac OS X、Windows或者Linux；
用Appium自动化测试不需要重新编译App；
支持很多语言来编写测试脚本，Java、Javascript、PHP、Python、C#、Ruby等主流语言；

设计理念：
C/S架构，appium的核心是一个web服务器，它提供了一套REST的接口，他会接收客户端的连接，监听到命令。执行后再将结果通过HTTP响应返还给客户端。
session，每个client连接到server以后都会创建一个session，自动化始终围绕一个session进行。不同语言有不同实现方式，但最终都是发送一个POST请求给服务端，请求中包含一个JSON对象。
Appium Server是Node.js写的，所以可以直接用NPM来进行安装。

相关限制：
如果你在Windows使用Appium，你没法使用预编译专用于OS X的.app文件，因为Appium依赖OS X专用的库来支持iOS测试，所以在Windows平台你不能测试iOS Apps。


1.4论本课程的重要性
面试中的加分项、吹牛逼的资本...




appium环境搭建

1、安装JDK
版本：1.8
下载地址：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
配置环境变量：
JAVA_HOME=C:\Program Files\Java\jdk1.8.0_151
在Path中添加:%JAVA_HOME%\bin;

2、安装IDEA
官网：https://www.jetbrains.com/


3、安装Android SDK
下载地址：http://dl.google.com/android/android-sdk_r24.4.1-windows.zip
配置环境变量：
ANDROID_HOME=D:\software\Android\Sdk
在Path中添加:%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools;

4、安装Genymotion
1）打开Genymotion官网：https://www.genymotion.com/ 
2）注册
3）下载地址：https://www.genymotion.com/download/
4）VirtualBox下载地址：http://download.virtualbox.org/virtualbox/5.1.30/VirtualBox-5.1.30-118389-Win.exe
注意事项：
1、最好不要改变VirtualBox的安装路径
2、enabled in BIOS settings，开机启动时设置virtualization technology的选项为Enabled。


异常：Failure [INSTALL_FAILED_NO_MATCHING_ABIS]
原因：Genymotion出现这个情况需要安装补丁包。原因是某些应用使用了原生库（NDK，Native Lib）因为这些库的编译目标通常是arm的cpu，在x86上运行就会报这样的错误。
具体解决办法如下：
下载Genymotion-ARM-Translation_v1.1.zip，直接拖入genymotion模拟器窗口，直到提示成功。


异常：Genymotion unfortunately has stopped
genymotion 6.0的 arm 兼容包，拖进去，处理完成后点OK，再关闭模拟器重启一下就可以了。



5、安装appium
appium有两种安装模式:
通过客户端安装
通过终端安装

区别：
在做自动化时，很多时候我们都是连接多台电脑去执行，但是appium去连接多台电脑时就需要启动多个appium的服务，如果说你安装是通过客户端去安装的，你连接多台机器就需要启动多个客户端，这样对你电脑本身也是一个性能考验。如果你是通过终端命令安装的在启动的时候你只需要通过命令启动多个服务就好。

appium客户端安装：
官方下载：http://appium.io/
下载地址：https://github.com/appium/appium-desktop/releases


appium终端安装：
首先安装nodejs，下载地址：https://nodejs.org/en/download/
1）直接在终端输入命令：npm install -g appium 一般不会成功，有防火墙
2）通过国内镜像安装：npm -registry http://registry.cnpmjs.org install -g appium
3）通过cnpm安装：
npm install -g cnpm --registry=https://registry.npm.taobao.org
cnpm install -g appium

npm与cnpm
npm（node package manager）是nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）
1.安装插件：npm install <name> [-g] [--save-dev]
<name>：node插件名称。
例：npm install appium --save-dev
-g：全局安装。 
将会安装在C:\Users\Administrator\AppData\Roaming\npm，并且写入系统环境变量；非全局安装：将会安装在当前定位目录；全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过require()调用；
--save：将保存配置信息至package.json（package.json是nodejs项目配置文件）；
-dev：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；
2.卸载插件：npm uninstall <name> [-g] [--save-dev] 
PS：不要直接删除本地插件包 
3.更新插件：npm update <name> [-g] [--save-dev] 
4.更新全部插件：npm update [--save-dev] 
5.查看npm帮助：npm help 
6.查看当前目录已安装插件：npm list


说明：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，所以我们乐于分享的淘宝团队干了这事。
官方网址：http://npm.taobao.org
安装：npm install cnpm -g --registry=https://registry.npm.taobao.org
注意：
1.安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误
2.cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm。 



7、appium的hello world
示例效果：通过程序自动安装“知乎”APP到手机中，启动APP并模拟左右滑动来切换页面。
//获取屏幕的宽度和高度
int x = driver.manage().window().getSize().getWidth();
int y = driver.manage().window().getSize().getHeight();
System.out.println("x===="+x);
System.out.println("y===="+y);

driver.swipe(x * 9/10, y/2, x/10, y/2, 500);
Thread.sleep(10000);
driver.swipe(x * 9/10, y/2, x/10, y/2, 500);
Thread.sleep(3000);

8、appium日志分析



============================================================================================================================
Android知识讲解
1、ADB工具
简介
ADB的全称为Android Debug Bridge，字面意思就是安卓调试桥接，简单点说就是一个调试工具。它是Android系统提供的一套工具，通过它我们可以在电脑上建立一个连接到手机的通道，然后可以在电脑上向手机发送一些指令，完成一些我们需要做的工作。

ADB常用命令
命令	描述
adb devices	查看已连接的设备
adb install <xxx.apk>	将apk文件安装到设备上
adb -s <serialno> install <xxx.apk>	将apk文件安装到指定设备上
adb uninstall <packageName>	卸载app
adb uninstall -k <packageName>	卸载app，保留数据和缓存
adb -s <serialno> uninstall <packageName>	卸载指定手机上的app
adb push <本地文件> <手机目标文件>	将本地文件上传到手机
adb pull <手机文件> <本地目标文件>	将手机文件下载到本地
adb shell	进入手机控制台
adb shell pm list packages	执行一条Linux命令


2、UIAutomatorViewer工具
UIAutomatorViewer是一个定位工具，在Android SDK目录下的tools/bin目录下。
我们打开定位工具、模拟器后直接点击定位工具左上角红色圈出的按钮（获取当前屏幕）UIAutomatorViewer会自动获取到当前模拟器所打开的页面。
最左边的区域就是捕获的模拟器页面，在该页面鼠标移到你要查找的元素上面，在整个区域右面上面就是当前对象的一个布局结构，能够清晰的看见他是采用的是什么布局。右下角的区域就是我们需要定位的对象的属性值


3、Package及Activity讲解
Package可以理解为APP的命名空间，是APP的唯一标示。我们在做APP自动化时，就需要知道他的Package，通过Package就可以定位到是哪个APP了。

Activity是Android组件中最基本也是最为常见用的四大组件之一。和用户进行交互的，每当用户打开app进行操作的时候会发现在不断的跳页面，其实每个页面就是一个activity。我们做自动化时拿到了这个app的Package，但是我们还不能启动起来，因为我们没有告诉需要去操作哪一个Activity，因此在这个时候我们需要讲app启动时的Activity写入到启动参数中，如果你传入一个其他页面的是不行的。

如何获取package及activity
获取package和activity的方法，在网上说了有很多种，这里我只给大家说我们常用的。
1、询问开发人员
2、使用aapt工具。aapt是sdk自带的一个工具，在sdk\builds-tools\目录下。
1.在命令行输入：aapt dump badging D:/apk/zhihu.apk
2.运行后的结果中以下两行分别是应用包名package和入口activity名称
package: name='com.zhihu.android'
launchable-activity: name='com.zhihu.android.app.ui.activity.MainActivity'

3、日志法
a、启动待测apk
b、开启日志输出：adb logcat>D:/log.txt
c、关闭日志输出：ctrl+c
d、查看日志
直接搜索 ：Displayed
找寻：Displayed com.android.messaging/.ui.conversationlist.ConversationListActivity: +1s493ms
appPackage = com.android.messaging
appActivity = .ui.conversationlist.ConversationListActivity



============================================================================================================================

学习DesiredCapabilities
简介
DesiredCapabilities 携带了一些配置信息，在启动session的时候是必须提供，如启动模式、apk/app配置、package/activity配置、浏览器配置、键盘配置等。
DesiredCapabilities的重要作用是在启动时传递信息给Appium Server。

常用Capability配置

下表中列举了Appium常用的Capability配置


============================================================================================================================

元素定位

name：name可以用text或content-desc只要这两个属性，任意一个有内容都可以用他定位。不要用name定位输入框，比如输入框中有默认值，每次输入内容后值都会改变，这时再次定位就会定位不到了。
driver.findElement(By.name("每日推荐"));
driver.findElementByName("每日推荐");

className：这个定位在web时可以，手机中同名的className太多了。
driver.findElement(By.className("android.widget.TextView"));
driver.findElementByClassName("android.widget.TextView");

id：redouce-id中的内容
driver.findElement(By.id("com.miui.home:id/search_but"));
driver.findElementById("com.miui.home:id/search_but");

AccessibilityId
driver.findElementByAccessibilityId("今日头条");

UiAutomator
driver.findElementByAndroidUIAutomator("new UiSelector().text(\"每日推荐\")");

xpath
driver.findElement(By.xpath("android.widget.FrameLayout[contains(@name, '每日推荐')]"));
driver.findElementByXpath("android.widget.FrameLayout[contains(@name, '每日推荐')]");


============================================================================================================================

元素点击
1).单击
单击方式有四个。下面分别写个示例，如何定位就不写了，常见的点击是click()方法，不过手机最好用TouchAction来点击。
element.click();
element.tap(1, 300);
driver.tap(1, element, 300);
new TouchAction(driver).tap(element).release().perform();


2).多击
//element.tap(2, 30);
//driver.tap(2, element, 30);
new TouchAction(driver).press(element).waitAction(30).release().press(element).waitAction(30).release().perform();


3).长按
new TouchAction(driver).longPress(element).release().perform();
new TouchAction(driver).longPress(element, 100).release().perform();

--------------------------------------------------------------
输入框操作
element.sendKeys("1234中国");
driver.pressKeyCode(AndroidKeyCode.KEYCODE_A); // 字母“a”
driver.pressKeyCode(AndroidKeyCode.DEL);


--------------------------------------------------------------

滑动
1.页面滑动
手机坐标原理图：

滑动时开始位置和结束位置要在屏幕内，不能超出屏幕，但手机分不同分辨率，我们的代码就得兼容不同分辨率的手机，因此我们首先要获得手机分辨率，才能确定我们手指的位置。手指的位置不要离屏幕边缘太近。
获取屏幕分辨率
Dimension dimension = driver.manage().window().getSize();

获取X轴最大值和Y轴最大值。
int x = dimension.getWidth();
int y = dimension.getHeight();

滑动屏幕在appium中使用到的方法是：
driver.swipe(int startx, int starty, int endx, int endy, int duration);

这时我们需要考虑滑屏的开始位置和结束位置，


通过上图，我们可以知道，左右滑动时Y轴不变，上下滑动时，X轴不变。那么我们就可以将不变值定为屏幕中间的位置，即x / 2或 y / 2.
滑动的区间可以设置为从9/10的位置滑到1/10的位置。通过计算最终可适用全部手机。duration表示滑动时间，毫秒，数值越小滑动越快。
从上往下滑动
driver.swipe(x/2, y/10, x/2, y*9/10, 500);
从下往上滑动
driver.swipe(x/2, y*9/10, x/2, y/10, 500);
从左往右滑
driver.swipe(x/10, y/2, x*9/10, y/2, 500);
从右往左滑
driver.swipe(x*9/10, y/2, x/10, y/2, 500);


2.元素滑动
元素滑动其实就是精确位置的页面滑动。首先要获取到元素的开始位置的坐标，再获取到元素的高度和宽度，然后计算出滑动的开始和结束坐标。
//获取元素信息
AndroidElement element = driver.findElement(By.xpath("//android.widget.FrameLayout[@index=2]"));
int x = element.getLocation().getX();
int y = element.getLocation().getY();
int width = element.getSize().getWidth();
int height = element.getSize().getHeight();

//计算起止位置坐标
int startX = x + width * 9 / 10;
int startY = y + height / 2;
int endX = x + width / 10;
int endY = startY;

//从右往左滑
driver.swipe(startX, startY, endX, endY, 500);
Thread.sleep(10000);

3.解锁九宫格
思路：
在做功能测试时，是将手指按住屏幕，然后从一个点滑动到另一个点，将密码滑动完成后再抬起手。这个方法封装在TouchAction中，TouchAction方法所有操作都需要加perform才会执行。

//定位9个圆点
AndroidElement one = driver.findElement(By.name("one"));
AndroidElement two = driver.findElement(By.name("two"));
AndroidElement three = driver.findElement(By.name("three"));
AndroidElement four = driver.findElement(By.name("four"));
AndroidElement five = driver.findElement(By.name("five"));
AndroidElement six = driver.findElement(By.name("six"));
AndroidElement seven = driver.findElement(By.name("seven"));
AndroidElement eight = driver.findElement(By.name("eight"));
AndroidElement nine = driver.findElement(By.name("nine"));
//1->2->5->8->9
TouchAction touchAction = new TouchAction(driver);
touchAction.press(one).moveTo(two).moveTo(five).moveTo(eight).moveTo(nine).release().perform();

--------------------------------------------------------------



下拉框操作

--------------------------------------------------------------
屏幕放大缩小

--------------------------------------------------------------
横竖屏切换
driver.rotate(ScreenOrientation.LANDSCAPE);
driver.rotate(ScreenOrientation.PORTRAIT);




--------------------------------------------------------------
截图操作
截图功能非常重要，尤其是在页面出现异常的时候，我们需要截图来保留现场。我们可以每个操作都截图，一般情况下我们只有在出现异常的时候才会截图。
File screenshot = driver.getScreenshotAs(OutputType.FILE);
File destFile = new File("D:/screenshot/a.png");
FileUtils.copyFile(screenshot, destFile);

--------------------------------------------------------------
等待技巧
我们的代码执行很快，但有时由于网速、手机硬件等原因加载需要时间。所以我们需要等待页面加载。
在appium中有三种等待方式。每个等待方式都有不同的用处，在前面的代码中为了让读者更清晰的看到代码执行的效果，用的最多的一个等待方式是强制等待，即要求等多久就等多久。
强制等待缺点比较明显，就是我们无法确定应该设置多长时间最优。比如说我设置了10秒。结果5秒加载完成。还会再等5秒，无疑浪费了5秒的时间。同样10秒没加载完成他依然继续执行后续代码。

强制等待
强制等待使用的是JAVA自己的等待，Thread.sleep()方法。


隐示等待
隐示等待是等待页面加载时间，我们设置一个超时时间，如果在设置的时间内页面加载完成就立即继续执行。如果一直不能完全加载，规定时间到后会报出异常。


此处设置是全局设置。
pageLoadTimeout是等待页面加载。
implicitlyWait是识别对象超时时间，如果在规定的时间内无法定位元素就报错
setScriptTimeout设置异步脚本超时时间，也就是有async属性的JS脚本。
driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
driver.manage().timeouts().setScriptTimeout(10, TimeUnit.SECONDS);
driver.manage().timeouts().wait(10);


显示等待
显示等待就是等待我们下一个需要定位的元素，元素出现就停止等待，开始执行代码。
//设置等待10s，每2s检查一次元素是否加载成功
WebDriverWait wait = new WebDriverWait(driver, 10, 2000);
wait.until(new ExpectedCondition<WebElement>() {
	public WebElement apply(WebDriver webDriver) {
		return webDriver.findElement(By.name("赞"));
	}
}).click();

===================================================================================================================================

TestNG
简介
TestNG是java的一个测试框架，Java中已经有一个JUnit的测试框架，但TestNG比JUnit功能强大的多。JAVA测试人员一般用TestNG来写自动化测试。
TestNG是用来简化广泛的测试需求的测试框架，从单元测试到集成测试。

安装
高版本的IDEA已经绑定了TestNG，不需要安装额外的插件。

TestNG基本注解
注解	描述
@BeforeSuite	被注解的方法只运行一次，运行此套件中所有测试方法前运行
@AfterSuite	被注解的方法只运行一次，运行完此套件的所有测试方法后运行
@BeforeTest	被注解的方法只运行一次，运行在此套件前
@AfterTest	被注解的方法只运行一次，运行在此套件后
@BeforeClass	被注解的方法只运行一次，运行在此套件的类前
@AfterClass	被注解的方法只运行一次，运行在此套件的类后
@BeforeGroups	被注解的方法运行次数与@Groups个数有关，运行在此套件的所有@Groups前
@AfterGroups	被注解的方法运行次数与@Groups个数有关，运行在此套件的所有@Groups后
@BeforeMethod	被注解的方法运行次数与@Test个数有关，在运行@Test前运行，如果有n个@Test则运行n次
@AfterMethod	被注解的方法运行次数与@Test个数有关，在运行@Test后运行，如果有n个@Test则运行n次
@DataProvider	为一个方法提供数据，必须返回Object[][]，如果一个方法想获取数据，使用dataProvider结束数据
@Factory	作为一个工厂，返回TestNG的测试类对象，该方法必须返回Object[]
@Listeners	定义一个测试类的监听器
@Parameters	介绍如何将参赛传递给@Test方法
@Test	测试类或方法


使用方式
忽略测试
如果我们的代码没写好或测试方法无法运行，这时我们需要禁用此方法。
@Test(enabled = false)
public void bar(){
	System.out.println("bar...");
}


异常测试
异常测试需要被注解的测试方法能够抛出异常，否则执行失败
@Test(expectedExceptions = ArithmeticException.class)
public void divByZeroTest() {
	int count = this.div(10, 0);
	System.out.println("count=" + count);
}
public int div(int a, int b) {
	return a / b;
}

依赖测试
有时测试方法有先后顺序，这时后执行的方法就需要依赖先执行的方法了
public class DependTest {
    @Test
    public void openApp() {
        System.out.println("openApp...");
    }

    @Test(dependsOnMethods = "openApp")
    public void inputUsername() {
        System.out.println("inputUsername...");
    }

    @Test(dependsOnMethods = "inputUsername")
    public void login() {
        System.out.println("login...");
    }
}

参数化
1.注解方式
public class DataProviderTest {
    @DataProvider
    public Object[][] userData() {
        return new Object[][]{new Object[]{1, "tom"}, new Object[]{2, "lucy"}};
    }

    @Test(dataProvider = "userData")
    public void printUserList(int userId, String username) {
        System.out.println("userId=" + userId + "\tusername=" + username);
    }
}

2.读取XML中的参数
public class XmlParameterTest {
    @Test
    @Parameters("username")
    public void test(String name) {
        System.out.println("username=" + name);
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="suite">
    <test name="test">
        <parameter name="username" value="tom"/>
        <classes>
            <class name="XmlParameterTest"/>
        </classes>
    </test>
</suite>


TestNG套件
TestNG套件是一组测试行为的集合。写在XML中，套件可以包含一个或多个测试。<suite>是根标签，它描述了一个测试套件。

suite属性
参数	说明	参数值	使用方法
name	必选项，此套件的名称	suite名字	name="XXX"
junit	是否执行Junit模式(识别setup()等)	true和false，默认false	junit="true"
verbose	控制台输出的详细内容等级,0-10级（0无，10最详细）	0到10	verbose="5"
parallel	是否在不同的线程并行进行测试，要与thread-count配套使用	详见表格下内容，默认false	parallel="mehods"
configfailurepolicy	测试失败后是再次执行还是跳过，值skip和continue	skip、continue，默认skip	configfailurepolicy="skip"
thread-count	与parallel配套使用，线程池的大小，决定并行线程数量	整数，默认5	thread-count="10"
annotations	获取注解，值为javadoc时，使用JavaDoc的注释；否则用JDK5注释	javadoc	annotations="javadoc"
time-out	设置parallel时，终止执行单元之前的等待时间（毫秒）	整数，单位毫秒	time-out="10000"
skipfailedinvocationcounts	是否跳过失败的调用	true和false，默认false	skipfailedinvocationcounts="true"
data-provider-thread-count	并发时data-provider的线程池数量	整数	data-provider-thread-count="5"
object-factory	一个实现IObjectFactory接口的类，实例化测试对象	类名	object-factory="classname"
allow-return-values	是否允许返回函数值	true和false	all-return-values="true"
preserve-order	是否按照排序执行	true和false，默认true	preserve-order="true"
group-by-instances	按照实例分组	true和false，默认false	group-by-instances="true"


TestNG运行JUnit
TestNG可以运行JUnit测试类，需要把属性junit设置为true。运行JUnit的testng.xml如下
package cn.itcast.autotest.testng;
import org.junit.Test;
/**
 * junit测试类
 */
public class JunitTest {
    @Test
    public void foo(){
        System.out.println("foo...");
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="suite" junit="true">
    <test name="test">
        <classes>
            <class name="JunitTest"/>
        </classes>
    </test>
</suite>


顺序执行
如果有多个@test我们需要给这些test规定执行顺序，那么我们应该这么写testng.xml
public class TestngOrder {
    @Test
    public void one(){
        System.out.println("one...");
    }

    @Test
    public void two(){
        System.out.println("two...");
    }

    @Test
    public void three(){
        System.out.println("three...");
    }

    @Test
    public void four(){
        System.out.println("four...");
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="suite">
    <test name="test">
        <classes>
            <class name="TestngOrder">
                <methods>
                    <include name="one" />
                    <include name="two" />
                    <include name="three" />
                    <include name="four" />
                </methods>
            </class>
        </classes>
    </test>
</suite>


组测试
将相似的测试方法合并到一起。组测试要写在testng.xml的<test>或<suite>中
在TestNG中，组groups的概念主要是相对于测试方法而言的。将具有相似功能的测试方法分组，这样在定义测试用例的时候就可以以组为单位加入对应的测试方法。
示例一
public class TestngGroups {
    @Test(groups = {"g1"})
    public void f1() {
        System.err.println("groups=g1 f1...");
    }

    @Test(groups = {"g2"})
    public void f2() {
        System.err.println("groups=g2 f2...");
    }

    @Test(groups = {"g1", "g2"})
    public void f3() {
        System.err.println("groups=g1,g2 f3...");
    }

    @Test(groups = {"g1", "g2"})
    public void f4() {
        System.err.println("groups=g1,g2 f4...");
    }
}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="suite">
    <test name="TestGroups">
        <groups>
            <run>
                <include name="g1"/>
                <exclude name="g2"/>
            </run>
        </groups>

        <classes>
            <class name="TestngGroups"/>
        </classes>
    </test>
</suite>

示例二
public class TestngGroupsOfGroups {
    @Test(groups = {"android.4"})
    public void f1() {
        System.err.println("groups=android.4 f1...");
    }

    @Test(groups = {"android.5"})
    public void f2() {
        System.err.println("groups=android.5 f2...");
    }

    @Test(groups = {"android.5.2"})
    public void f3() {
        System.err.println("groups=android.5.2 f3...");
    }

    @Test(groups = {"android.6"})
    public void f4() {
        System.err.println("groups=android.6 f4...");
    }
}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="suite">
    <test name="groupsOfGroups">
        <groups>
            <define name="android4">
                <include name="android.4"/>
            </define>
            <define name="android5">
                <include name="android.5"/>
                <include name="android.5.2"/>
            </define>
            <define name="all">
                <include name="android.*"/>
            </define>
            <run>
                <include name="all"/>
                <exclude name="android5"/>
            </run>
        </groups>
        <classes>
            <class name="TestngGroupsOfGroups"/>
        </classes>
    </test>
</suite>



断言
断言是预期结果与实际结果之间的比较。可以传递的参数有字符串、数组、数据类型等。下面举几个例子。
public class AssertTest {
    @Test
    public void foo(){
        int sum = this.add(1, 1);
        Assert.assertEquals(sum, 2);
        Assert.assertNotEquals(sum, 3);
        Assert.assertTrue(true);
        Assert.assertFalse(false);
    }

    public int add(int a, int b){
        return a + b;
    }
}

监听
当我们测试代码出现异常时我我们需要做一些处理，比如：截图、重试、输出日志等。
本章内容依然与TestNG有关，我们需要重写TestNG的TestListenerAdapter类中的方法。
失败截图
我们testng运行结果是否成功需要监听，监听到失败的结果再做操作。TestNG源码中的监听类显然不满足我们的需求，所以我们要重写这个方法。
TestNG监听类重写运行失败方法源码


生成测试报告
IEDA中生成测试报告配置
1、点击工具条中Run，选择Edit Configurations，弹出运行配置对话框，在左侧选择要设置运行的test，在右侧选择Configuration的Listeners项，将Listeners中的use Default reporters前的选择框打上对号，然后点击ok。
2、重新运行test，就会生产test-output文件了。



===================================================================================================================================




===================================================================================================================================






===================================================================================================================================


数据读写
XML读写
读写xml文件需要用到的一个jar包是dom4j。
1.读XML文件
思路分析
-不使用框架
-使用框架
@Test
public void read() throws DocumentException {
	SAXReader reader = new SAXReader();
	Document document = reader.read(new File("data/student-list.xml"));

	Element rootElement = document.getRootElement();
	String rootElementName = rootElement.getName();
	System.out.println(rootElementName);

	List<Element> elementList = rootElement.elements();
	for (Element studentElement : elementList) {
		String id = studentElement.attributeValue("id");
		String name = studentElement.element("name").getText();
		String age = studentElement.element("age").getText();
		System.out.println(id);
		System.out.println(name);
		System.out.println(age);
		System.out.println();
	}
}

2.写XML文件
@Test
public void write() throws Exception {
	SAXReader reader = new SAXReader();
	Document document = reader.read(new File("data/student-list.xml"));

	Element rootElement = document.getRootElement();
	String rootElementName = rootElement.getName();
	System.out.println(rootElementName);

	Element studentElement = rootElement.addElement("student");
	studentElement.addAttribute("id", "3");
	Element nameElement = studentElement.addElement("name");
	nameElement.setText("宋小宝 ");
	studentElement.addElement("age").setText("18");

	OutputFormat format = new OutputFormat("\t", true, "UTF-8");
	format.setTrimText(true);

	XMLWriter xmlWriter = new XMLWriter(new FileOutputStream(new File("data/student-list.xml")), format);
	xmlWriter.write(document);
	xmlWriter.close();
}


资源文件读写
有时一些数据需要打到程序包中，轻易不会更改。而写在代码里又不方便维护就需要写配置文件了。properties是java自带的数据文件。不需要额外的jar包支持。
1.读properties文件
思路分析
@Test
public void read() throws IOException {
	Properties prop = new Properties();
	prop.load(new FileInputStream("data/conf.properties"));

	String username = prop.getProperty("username");
	String password = prop.getProperty("password");
	String host = prop.getProperty("host", "localhost");
	System.out.println(username);
	System.out.println(password);
	System.out.println(host);
}

2.写properties文件
@Test
public void write() throws IOException {
	Properties prop = new Properties();
	prop.load(new FileInputStream("data/conf.properties"));

	prop.setProperty("username", "test");
	prop.setProperty("host", "www.baidu.com");

	prop.store(new FileOutputStream("data/conf.properties"), "sys config");
}


Excel读写
Java 操作excel的工具有两套，一个是POI，一个是jExcelAPI，其中POI功能弱一些，jExcelAPI对中文支持非常好。API是纯java写的。可以在windows和Linux上运行。不过jExcelAPI对图片支持差，只能识别png格式。
我们本节用POI讲，这个的功能够我们使用了。如果想学习jExcelAPI可以自己学习。
1.读Excel文件
@Test
public void read() throws IOException {
	HSSFWorkbook workbook = new HSSFWorkbook(new FileInputStream("data/low.xls"));

	int numberOfSheets = workbook.getNumberOfSheets();
	System.out.println(numberOfSheets);

	HSSFSheet sheet = workbook.getSheet("学生列表");
	int lastRowNum = sheet.getLastRowNum();
	System.out.println("lastRowNum=" + lastRowNum);

	int firstRowNum = sheet.getFirstRowNum();
	System.out.println("firstRowNum=" + firstRowNum);

	for (int i = 1; i <= lastRowNum; i++) {
		HSSFRow row = sheet.getRow(i);
		System.out.println(row.getFirstCellNum());
		System.out.println(row.getLastCellNum());

		HSSFCell idCell = row.getCell(0);
		//String id = idCell.getStringCellValue();
		double id = idCell.getNumericCellValue();
		String username = row.getCell(1).getStringCellValue();
		System.out.println("id=" + (int) id);
		System.out.println("username=" + username);
		System.out.println();
	}
}

@Test
public void readHighVersion() throws IOException {
	XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream("data/high.xlsx"));
	int numberOfSheets = workbook.getNumberOfSheets();
	System.out.println(numberOfSheets);
}

@Test
public void getWorkbookTest() throws IOException {
	//Workbook workbook = ExcelUtil.getWorkbook(new File("data/high.xlsx"));
	Workbook workbook = ExcelUtil.getWorkbook(new File("data/low.xls"));
	int numberOfSheets = workbook.getNumberOfSheets();
	System.out.println(numberOfSheets);
}

2.写Excel文件
@Test
public void createExcel() throws IOException {
	Workbook workbook = new XSSFWorkbook();
	Sheet sheet = workbook.createSheet("test");
	Row row = sheet.createRow(0);
	Cell cell = row.createCell(0);
	cell.setCellValue("hello");
	row.createCell(1).setCellValue(100);

	FileOutputStream outputStream = new FileOutputStream("D://test.xlsx");
	workbook.write(outputStream);

	outputStream.close();
	workbook.close();
}

@Test
public void update() throws IOException {
	File file = new File("data/low.xls");
	Workbook workbook = ExcelUtil.getWorkbook(file);

	Sheet sheet = workbook.getSheetAt(0);
	int lastRowNum = sheet.getLastRowNum();

	Row row = sheet.createRow(lastRowNum + 1);
	row.createCell(0).setCellValue(4);
	row.createCell(1).setCellValue("appium");
	row.createCell(2).setCellValue(10);

	FileOutputStream outputStream = new FileOutputStream(file);
	workbook.write(outputStream);

	outputStream.close();
	workbook.close();
}

数据库读写
不同数据容器的对比
当我们有多人协作开发时，数据库读写就至关重要了。我们不可能把资源文件来回传，哪怕是上传到svn上，也可能出现修改不当的问题。
@Test
public void select() throws Exception {
	Class.forName("com.mysql.jdbc.Driver");
	String url = "jdbc:mysql://localhost:3306/appium";
	String username = "root";
	String pwd = "root";
	Connection conn = DriverManager.getConnection(url, username, pwd);

	String sql = "SELECT * FROM student";
	PreparedStatement preparedStatement = conn.prepareStatement(sql);

	ResultSet resultSet = preparedStatement.executeQuery();
	while (resultSet.next()) {
		int id = resultSet.getInt("id");
		String name = resultSet.getString("name");
		int age = resultSet.getInt("age");
		System.out.println("id=" + id + " name=" + name + " age=" + age);
	}

	resultSet.close();
	preparedStatement.close();
	conn.close();
}

@Test
public void insert() throws Exception {
	Class.forName("com.mysql.jdbc.Driver");
	String url = "jdbc:mysql://localhost:3306/appium";
	String username = "root";
	String pwd = "root";
	Connection conn = DriverManager.getConnection(url, username, pwd);

	String sql = "INSERT INTO student(name,age) VALUES (?,?)";
	PreparedStatement preparedStatement = conn.prepareStatement(sql);

	preparedStatement.setString(1, "王五");
	preparedStatement.setInt(2, 50);
	int updateCount = preparedStatement.executeUpdate();
	System.out.println("updateCount=" + updateCount);

	preparedStatement.close();
	conn.close();
}

@Test
public void update() throws Exception {
	Connection conn = DBUtil.getConnection();

	String sql = "UPDATE student SET age=? WHERE id=?";
	PreparedStatement preparedStatement = conn.prepareStatement(sql);

	preparedStatement.setInt(1, 500);
	preparedStatement.setInt(2, 3);
	int updateCount = preparedStatement.executeUpdate();
	System.out.println("updateCount=" + updateCount);

	preparedStatement.close();
	conn.close();
}

@Test
public void delete() throws Exception {
	Connection conn = DBUtil.getConnection();

	String sql = "DELETE FROM student WHERE id=?";
	PreparedStatement preparedStatement = conn.prepareStatement(sql);

	preparedStatement.setInt(1, 3);
	int updateCount = preparedStatement.executeUpdate();
	System.out.println("updateCount=" + updateCount);

	preparedStatement.close();
	conn.close();
}


===================================================================================================================================
PO技术
方法封装
方法封装是将一些有共性的或多次被使用的方法写到一个类中，这样可以避免代码冗余，且容易维护，只需要改一个方法所有需要调用此方法的方法结果都会被修改。
封装方法的目的是用最少的代码实现最多的功能。

PO技术介绍
大家都知道在做UI自动化时定位特别依赖页面，一旦页面发生变更就不得不跟着去修改页面定位。
在webdriver中，假设你想对一个元素定位操作，那么你可能会编写下面的代码：
driver.findElement(By.id("ad")).click();
发现问题：
你有10个地方对这个元素做了这个操作，哪天这个控件的元素变了，你就不得不去修改10个地方。
那么，有什么好的方法来解决这个问题呢？
这就是PO模式的引入的必要性。

Page Object是自动化测试项目开发实践的最佳设计模式之一，通过对界面元素的封装减少冗余代码，同时在后期维护中，若元素定位发生变化，只需要调整页面元素封装的代码，提高测试用例的可维护性。

PageObject的优点
提高测试用例的可读性；
减少了代码的重复；
提高测试用例的可维护性，特别是针对UI频繁变动的项目。

模式一
把页面作为对象，在使用中传递页面对象，来使用页面对象中相应的成员或者方法，能更好的提现java的面向对象和封装特性。


模式二
PO技术分为三层，对象库层、操作层、业务层。
对象库层封装定位元素方法。
操作层封装对元素的操作。
业务层将操作统合起来，比如登录。需要输入帐号、密码、点击登录三个操作。

不使用模式的示例

模式一的示例

模式二的示例


===================================================================================================================================
数据驱动


数据驱动就是测试数据决定测试结果。比如我们要测试加法，我们的测试数据是1和1，测试结果就是2，如果测试数据是1和2，测试结果就是3。
数据驱动是以数据来驱动我们的整个测试用例的执行。
数据驱动本身不是一个工业级标准的概念，因此在不同的公司都会有不同的解释。可以把数据驱动理解为一种模式或者一种思想。
数据驱动技术可以将用户使用工具的关注点放在对测试数据的构建和维护上，而不是直接维护脚本，可以利用同样的过程对不同的数据输入进行测试。

示例
对手机系统中的计算器，进行加法的测试操作。
数据文件


关键字驱动
关键字驱动是从面向对象的思路出发，把自动化测试的代码转换成为大家更容易懂的自然语言。


原理及特点
1.关键字驱动测试是数据驱动测试的一种改进类型。
2.主要关键字包括三类：被操作对象（item）、操作（operation）和值（value），用面向对象形式可将其表现为item.operation(value)。
3.将测试逻辑按照这些关键字进行分解，形成数据文件。
4.用关键字的形式将测试逻辑封装在数据文件中，测试工具只要能够解释这些关键字即可对其应用自动化。

自动化的关键字驱动方法背后的思想是将代码与测试用例和测试步骤分开。这有助于非技术人员了解自动化的情况。有了这个手工测试人员就可以编写自动化脚本了。
关键字驱动，则进一步在技术上把测试人员分成了完全不懂技术的和懂点技术的，前者只能根据格式填写一下excel表格，后者对工具/框架内置的所谓关键字库进行增补或二次开发。


关键字驱动框架
关键字驱动框架是一种功能自动化测试框架，它也被称为基于表格驱动的测试或基于动作的测试。关键字驱动框架的基本工作是将测试用例划分为四个不同的部分。
- 测试步骤
- 测试步骤的对象
- 测试对象的操作
- 测试对象的数据






什么是数据驱动呢？很大一部分人肯定认为数据驱动就是把需要参数化的东西写在EXCEL里，然后在跑脚本时调用。如果我告诉你，这其实不是数据驱动，
而只是较高级的参数化，你肯定会很惊讶！现在我来解释一下：首先为什么叫数据驱动呢，那么它肯定有驱动的含义，比如你用EXCEL可以控制测试的业务流吗？回答是不能的。那又如何作到驱动呢？所以说我们将测试数据放在独立的文件里只是高级的参数话。而数据驱动，你必须有数据来控制测试的业务流。比如你测一个WEB程序，有很多页面，你可以通过一个数据来控制每次是再哪个页面下工作的（即通过数据来导航到相应的页面）。它是关键字驱动的低级版本，他控制的是函数级的，而关键字是控制动作级的。所以数据驱动应该是可以控制整个测试的


什么驱动，就是什么决定结果。本来结果是固定的，由于驱动数据的变更，导致了结果的不同，没那么复杂。其实概念都是人定的，少去钻牛角尖，理解个大概意思就行了。


而关键字驱动，则进一步在技术上把 tester 分成了完全不懂技术的和懂点技术的，前者只能根据格式填写一下 excel 表格，后者对工具/框架内置的所谓关键字库进行增补或二次开发。

关键字驱动之所以会出现，可能初衷还是为了降低自动化实施的门槛——因为tester都不太懂开发嘛，所以开发能力强的人把框架实现出来，原来那些只会写excel的 system tester填写表格就可以了。



关键字驱动的来源非常自然，从面向对象的思路出发，同样的业务逻辑会自然的编写成一个类或者函数作为关键字来被不同的测试脚本所调用。当测试框架发展到所有的测试过程都已经可以被写好的函数和类所组合完成时，就进化到了关键字驱动的一个高级阶段，这个时候测试用例的开发就变成了测试数据和关键字的组合，并把这种组合工作简化为所有人都很熟悉的表格填写任务，从而最终达到一个由数据和关键字驱动整个测试的效果。

在关键字驱动框架里，你可以创建一些关键字以及相关联的一些方法和函数。然后你创建一个函数库，它里面包含一个读取关键字的逻辑，然后调用相关的动作。


就是关键字驱动，只有把自动化测试的代码转换成为大家更容易懂的自然语言，才能让更多不懂代码的人加入进去，才能达到平台化的目的。



　   关键字驱动的自动化测试(也称为表驱动测试自动化)，是数据驱动自动化测试的变种，可支持由不同序列或多个不同路径组成的测试。它是一种独立于应用程序的自动化框架，在处理自动化测试的同时也要适合手工测试。关键字驱动的自动化测试框架建立在数据驱动手段之上，表中包含指令(关键词)，而不只是数据。这些测试被开发成使用关键字的数据表，它们独立于执行测试的自动化工具。关键字驱动的自动化测试是对数据驱动的自动化测试的有效改进和补充。


拿具体步骤解释关键字驱动：

1.建立对象库：

将所有对象（控件）属性及方法进行封装

2.编制脚本，使用封装好了的控件及其对应的方法，给所进行的操作赋值

关键字驱动测试表示没有必要真正进行录制、回放，没有必要等软件非常稳定时再开展自动化测试，而且只要测试人员对软件业务足够了解，即可直接介入。

===================================================================================================================================




d:
cd /zzz/project
java -classpath "%classpath%;./autotest-1.0-SNAPSHOT-jar-with-dependencies.jar" org.testng.TestNG -testclass cn.itcast.autotest.HelloWorld



mvn clean assembly:assembly
copy target\autotest-1.0-SNAPSHOT-jar-with-dependencies.jar autotest-1.0-SNAPSHOT-jar-with-dependencies.jar /Y
java -classpath "%classpath%;./autotest-1.0-SNAPSHOT-jar-with-dependencies.jar" org.testng.TestNG -testclass cn.itcast.autotest.T

https://github.com/likgjava/uiautotest.git

mvn clean assembly:assembly

copy target\autotest-1.0-SNAPSHOT-jar-with-dependencies.jar autotest-1.0-SNAPSHOT-jar-with-dependencies.jar /Y
java -classpath "target/autotest-1.0-SNAPSHOT-jar-with-dependencies.jar" org.testng.TestNG -testclass cn.itcast.autotest.T -d test-report/%BUILD_ID%

test-report/${BUILD_ID}

java -classpath "target/autotest-1.0-SNAPSHOT-jar-with-dependencies.jar" org.testng.TestNG -testclass cn.itcast.autotest.po.m2.login.LoginTest -d test-report/%BUILD_ID%
xcopy screenshot test-report\%BUILD_ID%\screenshot\ /Y






===================================================================================================================================
其他知识点：

licecap

混合APP测试


PO技术和方法封装

并发测试
关键字驱动





===================================================================================================================================
http://blog.csdn.net/wukuy123/article/details/73744784



问题记录：
Android 怎么获取 INJECT_EVENTS（小米手机）
http://blog.csdn.net/zhaoqi5705/article/details/53455597


cnpm与npm的区别
http://blog.csdn.net/chi1130/article/details/72773278




资源
http://www.cnblogs.com/fnng/p/4540731.html
https://anikikun.gitbooks.io/appium-girls-tutorial/content/download_fulu.html 


中文 Appium API 文档
源地址：https://github.com/appium/appium/tree/master/docs/cn


http://t.cn/RHZDcwI
ix6n





